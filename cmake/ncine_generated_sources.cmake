# Has to be included after ncine_get_version.cmake

set(GENERATED_SOURCE_DIR "${CMAKE_BINARY_DIR}/Generated")
set(GENERATED_INCLUDE_DIR "${GENERATED_SOURCE_DIR}")

# Shader strings
file(GLOB SHADER_FILES "${NCINE_SOURCE_DIR}/nCine/Shaders/*.glsl")
if(NCINE_EMBED_SHADERS)
	message(STATUS "Exporting shader files to C strings")

	set(SHADERS_H_FILE "${GENERATED_INCLUDE_DIR}/shader_strings.h")
	set(SHADERS_CPP_FILE "${GENERATED_SOURCE_DIR}/shader_strings.cpp")
	if(EXISTS ${SHADERS_H_FILE})
		file(REMOVE ${SHADERS_H_FILE})
	endif()
	if(EXISTS ${SHADERS_CPP_FILE})
		file(REMOVE ${SHADERS_CPP_FILE})
	endif()

	set(SHADER_STRUCT_NAME "ShaderStrings")
	get_filename_component(SHADERS_H_FILENAME ${SHADERS_H_FILE} NAME)
	file(APPEND ${SHADERS_H_FILE} "namespace nCine {\n\n")
	file(APPEND ${SHADERS_H_FILE} "struct ${SHADER_STRUCT_NAME}\n{\n")
	file(APPEND ${SHADERS_CPP_FILE} "#include \"${SHADERS_H_FILENAME}\"\n\n")
	file(APPEND ${SHADERS_CPP_FILE} "namespace nCine {\n\n")
	foreach(SHADER_FILE ${SHADER_FILES})
		get_filename_component(SHADER_CSTRING_NAME ${SHADER_FILE} NAME_WE)
		file(STRINGS ${SHADER_FILE} SHADER_LINES)
		file(APPEND ${SHADERS_H_FILE} "\tstatic char const * const ${SHADER_CSTRING_NAME};\n")
		file(APPEND ${SHADERS_CPP_FILE} "char const * const ${SHADER_STRUCT_NAME}::${SHADER_CSTRING_NAME} = ")
		file(APPEND ${SHADERS_CPP_FILE} "R\"(\n")
		foreach(SHADER_LINE ${SHADER_LINES})
			file(APPEND ${SHADERS_CPP_FILE} "${SHADER_LINE}\n")
		endforeach()
		file(APPEND ${SHADERS_CPP_FILE} ")\"")
		file(APPEND ${SHADERS_CPP_FILE} ";\n\n")
	endforeach()
	file(APPEND ${SHADERS_H_FILE} "};\n\n}\n")
	file(APPEND ${SHADERS_CPP_FILE} "}\n")

	list(APPEND GENERATED_SOURCES ${SHADERS_H_FILE})
	list(APPEND GENERATED_SOURCES ${SHADERS_CPP_FILE})
	target_compile_definitions(${NCINE_APP} PRIVATE "WITH_EMBEDDED_SHADERS")
	list(APPEND ANDROID_GENERATED_FLAGS WITH_EMBEDDED_SHADERS)

	# Don't need to add shader files to the library target if they are embedded
	set(SHADER_FILES "")
endif()

if(WIN32)
	if(EXISTS ${NCINE_SOURCE_DIR}/Icons/Main.ico)
		message(STATUS "Writing a resource file for executables icon")

		set(RESOURCE_RC_FILE "${GENERATED_SOURCE_DIR}/resource.rc")
		file(WRITE ${RESOURCE_RC_FILE} "GLFW_ICON ICON \"Main.ico\"")
		file(COPY ${NCINE_SOURCE_DIR}/Icons/Main.ico DESTINATION ${GENERATED_INCLUDE_DIR})
		list(APPEND GENERATED_SOURCES ${RESOURCE_RC_FILE})
	endif()

	message(STATUS "Writing a version info resource file")
	set(PACKAGE_VERSION_PATCH ${NCINE_VERSION_PATCH})
	if(NCINE_VERSION_FROM_GIT AND GIT_NO_TAG)
		set(PACKAGE_VERSION_PATCH "0")
	endif()
	set(PACKAGE_VERSION_REV "0")
	if(DEFINED GIT_REV_COUNT)
		set(PACKAGE_VERSION_REV ${GIT_REV_COUNT})
	endif()

	set(PACKAGE_EXECUTABLE_NAME "Jazz2")
	get_target_property(NCINE_DEBUG_POSTFIX ${NCINE_APP} DEBUG_POSTFIX)
	if(NOT NCINE_DEBUG_POSTFIX)
		set(NCINE_DEBUG_POSTFIX "d")
	endif()
	set(PACKAGE_EXTENSION ".exe")
	if(WINDOWS_PHONE OR WINDOWS_STORE)
		set(PACKAGE_EXTENSION ".msixbundle")
	endif()
	string(TIMESTAMP PACKAGE_VERSION_YEAR "%Y")

	set(VERSION_RC_FILE "${GENERATED_SOURCE_DIR}/version.rc")
	configure_file("${NCINE_SOURCE_DIR}/Resources.rc.in" ${VERSION_RC_FILE} @ONLY)
	list(APPEND GENERATED_SOURCES ${VERSION_RC_FILE})

	list(APPEND GENERATED_SOURCES ${NCINE_SOURCE_DIR}/App.manifest)
endif()

# Generate Nuklear implementation file
#if(NCINE_WITH_NUKLEAR)
#	set(NUKLEAR_CPP_FILE "${GENERATED_SOURCE_DIR}/nuklear.cpp")
#	file(WRITE ${NUKLEAR_CPP_FILE} "#define NK_IMPLEMENTATION\n")
#	file(APPEND ${NUKLEAR_CPP_FILE} "#include \"NuklearContext.h\"\n")
#	file(APPEND ${NUKLEAR_CPP_FILE} "#include \"nuklear.h\"\n")

#	list(APPEND GENERATED_SOURCES ${NUKLEAR_CPP_FILE})
#endif()

if(EXISTS ${CMAKE_SOURCE_DIR}/config.h.in)
	set(CONFIG_H_IN ${CMAKE_SOURCE_DIR}/config.h.in)
	set(CONFIG_H ${GENERATED_INCLUDE_DIR}/config.h)

	if(NCINE_WITH_THREADS AND Threads_FOUND)
		set(NCINE_WITH_THREADS TRUE)
	else()
		set(NCINE_WITH_THREADS FALSE)
	endif()
	if (ANGLE_FOUND OR OPENGLES2_FOUND)
		set(NCINE_WITH_OPENGLES TRUE)
	endif()
	set(NCINE_WITH_GLEW ${GLEW_FOUND})
	if(NCINE_PREFERRED_BACKEND STREQUAL "GLFW")
		set(NCINE_WITH_GLFW ${GLFW_FOUND})
	elseif(NCINE_PREFERRED_BACKEND STREQUAL "SDL2")
		set(NCINE_WITH_SDL ${SDL2_FOUND})
	elseif(NCINE_PREFERRED_BACKEND STREQUAL "QT5")
		set(NCINE_WITH_QT5 ${Qt5_FOUND})
	endif()
	set(NCINE_WITH_PNG ${PNG_FOUND})
	set(NCINE_WITH_WEBP ${WEBP_FOUND})
	set(NCINE_WITH_AUDIO ${OPENAL_FOUND})
	if(NCINE_WITH_AUDIO AND VORBIS_FOUND)
		set(NCINE_WITH_VORBIS TRUE)
	else()
		set(NCINE_WITH_VORBIS FALSE)
	endif()
	set(NCINE_WITH_LUA ${LUA_FOUND})
	if(NCINE_WITH_LUA AND NCINE_WITH_SCRIPTING_API)
		set(NCINE_WITH_SCRIPTING_API TRUE)
	else()
		set(NCINE_WITH_SCRIPTING_API FALSE)
	endif()

	configure_file(${CONFIG_H_IN} ${CONFIG_H} @ONLY)
	list(APPEND HEADERS ${CONFIG_H})

	message(STATUS "Configuration file: \"${CONFIG_H}\"")
	if(NCINE_WITH_THREADS)
		message(STATUS "NCINE_WITH_THREADS: " ${NCINE_WITH_THREADS})
	endif()
	if(NCINE_WITH_ANGLE)
		message(STATUS "NCINE_WITH_OPENGLES: " ${NCINE_WITH_OPENGLES})
	endif()
	if(NCINE_WITH_GLEW)
		message(STATUS "NCINE_WITH_GLEW: " ${NCINE_WITH_GLEW})
	endif()
	if(NCINE_WITH_GLFW)
		message(STATUS "NCINE_WITH_GLFW: " ${NCINE_WITH_GLFW})
	endif()
	if(NCINE_WITH_SDL)
		message(STATUS "NCINE_WITH_SDL: " ${NCINE_WITH_SDL})
	endif()
	if(NCINE_WITH_QT5)
		message(STATUS "NCINE_WITH_QT5: " ${NCINE_WITH_QT5})
	endif()
	if(NCINE_WITH_AUDIO)
		message(STATUS "NCINE_WITH_AUDIO: " ${NCINE_WITH_AUDIO})
	endif()
	if(NCINE_WITH_VORBIS)
		message(STATUS "NCINE_WITH_VORBIS: " ${NCINE_WITH_VORBIS})
	endif()
	if(NCINE_WITH_PNG)
		message(STATUS "NCINE_WITH_PNG: " ${NCINE_WITH_PNG})
	endif()
	if(NCINE_WITH_WEBP)
		message(STATUS "NCINE_WITH_WEBP: " ${NCINE_WITH_WEBP})
	endif()
	if(NCINE_WITH_LUA)
		message(STATUS "NCINE_WITH_LUA: " ${NCINE_WITH_LUA})
	endif()
	if(NCINE_WITH_SCRIPTING_API)
		message(STATUS "NCINE_WITH_SCRIPTING_API: " ${NCINE_WITH_SCRIPTING_API})
	endif()
	if(NCINE_WITH_ALLOCATORS)
		message(STATUS "NCINE_WITH_ALLOCATORS: " ${NCINE_WITH_ALLOCATORS})
	endif()
	if(NCINE_WITH_IMGUI)
		message(STATUS "NCINE_WITH_IMGUI: " ${NCINE_WITH_IMGUI})
	endif()
	if(NCINE_WITH_NUKLEAR)
		message(STATUS "NCINE_WITH_NUKLEAR: " ${NCINE_WITH_NUKLEAR})
	endif()
	if(NCINE_WITH_TRACY)
		message(STATUS "NCINE_WITH_TRACY: " ${NCINE_WITH_TRACY})
	endif()
	if(NCINE_WITH_RENDERDOC)
		message(STATUS "NCINE_WITH_RENDERDOC: " ${NCINE_WITH_RENDERDOC})
	endif()
endif()
